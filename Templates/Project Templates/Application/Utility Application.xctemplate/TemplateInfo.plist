<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.storyboardApplication</string>
		<string>com.apple.dt.unit.coreDataCocoaTouchApplication</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Definitions</key>
	<dict>
		<key>___VARIABLE_classPrefix:identifier___FlipsideViewController.h</key>
		<dict>
			<key>Path</key>
			<string>FlipsideViewController.h</string>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:Actions</key>
		<string>#pragma mark - Actions

- (IBAction)done:(id)sender
{
    [self.delegate flipsideViewControllerDidFinish:self];
}
</string>
		<key>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:initSection:initViewController:contentSizeForViewInPopover</key>
		<string>self.contentSizeForViewInPopover = CGSizeMake(320.0, 480.0);</string>
		<key>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___FlipsideViewController ()

@end
</string>
		<key>___VARIABLE_classPrefix:identifier___MainViewController.h:ivars</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___MainViewController : UIViewController &lt;___VARIABLE_classPrefix:identifier___FlipsideViewControllerDelegate&gt;
</string>
		<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:flipsideView</key>
		<string>#pragma mark - Flipside View

- (void)flipsideViewControllerDidFinish:(___VARIABLE_classPrefix:identifier___FlipsideViewController *)controller
{
    [self dismissModalViewControllerAnimated:YES];
}
</string>
		<key>___VARIABLE_classPrefix:identifier___MainViewController.m:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___MainViewController ()

@end
</string>
	</dict>
	<key>Description</key>
	<string>This template provides a starting point for a utility application that has a main view and an alternate view. For iPhone, it sets up an Info button to flip the main view to the alternate view. For iPad, it sets up an Info bar button that shows the alternate view in a popover.</string>
	<key>Identifier</key>
	<string>com.apple.dt.unit.utilityApplication</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.h:comments</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.h:import:___VARIABLE_classPrefix:identifier___FlipsideViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.h:class</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.h:ivars</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.h:methods</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:import:___VARIABLE_classPrefix:identifier___MainViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:private</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:synthesize</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:initSection</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:viewDidLoad</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:viewDidUnload</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:flipsideView</string>
		<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:prepareForSegue</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:import:___VARIABLE_classPrefix:identifier___FlipsideViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:private</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:synthesize:delegate = _delegate</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:initSection</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:viewDidLoad</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:viewDidUnload</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
		<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:Actions</string>
		<string>___PACKAGENAME___-Info.plist:UISupportedInterfaceOrientations~iPhone</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>useARC</string>
			<key>Units</key>
			<dict>
				<key>false</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___FlipsideViewController.h</key>
							<dict>
								<key>Path</key>
								<string>FlipsideViewControllerMRC.h</string>
							</dict>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>coreData</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:ivars</key>
							<dict>
								<key>Beginning</key>
								<string>#import &lt;CoreData/CoreData.h&gt;

@interface ___VARIABLE_classPrefix:identifier___MainViewController : UIViewController &lt;___VARIABLE_classPrefix:identifier___FlipsideViewControllerDelegate&gt;
</string>
								<key>Indent</key>
								<integer>1</integer>
							</dict>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:managedObjectContext</key>
							<string>@property (strong, nonatomic) NSManagedObjectContext *managedObjectContext;
</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:managedObjectContext</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:synthesize:managedObjectContext = _managedObjectContext</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:dealloc:_managedObjectContext</string>
							<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:initSection:initViewController:coreData</string>
						</array>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>___VARIABLE_classPrefix:identifier___MainViewController *controller = (___VARIABLE_classPrefix:identifier___MainViewController *)self.window.rootViewController;
controller.managedObjectContext = self.managedObjectContext;</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___MainViewController.h</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>universalDeviceFamily</string>
			<key>Units</key>
			<dict>
				<key>Universal</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:flipsidePopoverController</key>
							<string>@property (strong, nonatomic) UIPopoverController *flipsidePopoverController;
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:flipsideView</key>
							<string>#pragma mark - Flipside View Controller

- (void)flipsideViewControllerDidFinish:(___VARIABLE_classPrefix:identifier___FlipsideViewController *)controller
{
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
        [self dismissModalViewControllerAnimated:YES];
    } else {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
    }
}
</string>
							<key>en.lproj/MainStoryboard_iPad.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
							</dict>
							<key>en.lproj/MainStoryboard_iPhone.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:flipsidePopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:synthesize:flipsidePopoverController = _flipsidePopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:dealloc:_flipsidePopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:initSection:initViewController:contentSizeForViewInPopover</string>
						</array>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
    self.mainViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MainViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MainViewController_iPhone" bundle:nil]___AR___;
} else {
    self.mainViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MainViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MainViewController_iPad" bundle:nil]___AR___;
}
self.window.rootViewController = self.mainViewController;</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:showInfo</key>
							<string>- (IBAction)showInfo:(id)sender
{
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
        ___VARIABLE_classPrefix:identifier___FlipsideViewController *controller = ___RP___[[___VARIABLE_classPrefix:identifier___FlipsideViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___FlipsideViewController" bundle:nil]___AR___;
        controller.delegate = self;
        controller.modalTransitionStyle = UIModalTransitionStyleFlipHorizontal;
        [self presentModalViewController:controller animated:YES];
    } else {
        if (!self.flipsidePopoverController) {
            ___VARIABLE_classPrefix:identifier___FlipsideViewController *controller = ___RP___[[___VARIABLE_classPrefix:identifier___FlipsideViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___FlipsideViewController" bundle:nil]___AR___;
            controller.delegate = self;
            
            self.flipsidePopoverController = ___RP___[[UIPopoverController alloc] initWithContentViewController:controller]___AR___;
        }
        if ([self.flipsidePopoverController isPopoverVisible]) {
            [self.flipsidePopoverController dismissPopoverAnimated:YES];
        } else {
            [self.flipsidePopoverController presentPopoverFromBarButtonItem:sender permittedArrowDirections:UIPopoverArrowDirectionAny animated:YES];
        }
    }
}
</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController_iPad.xib</key>
							<dict>
								<key>Path</key>
								<string>MainViewController_iPad.xib</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController_iPhone.xib</key>
							<dict>
								<key>Path</key>
								<string>MainViewController_iPhone.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController_iPhone.xib</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController_iPad.xib</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:ivars</key>
							<string>@interface ___VARIABLE_classPrefix:identifier___MainViewController : UIViewController &lt;___VARIABLE_classPrefix:identifier___FlipsideViewControllerDelegate, UIPopoverControllerDelegate&gt;
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:showInfo</key>
							<string>- (IBAction)togglePopover:(id)sender;
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:flipsideView</key>
							<string>#pragma mark - Flipside View Controller

- (void)flipsideViewControllerDidFinish:(___VARIABLE_classPrefix:identifier___FlipsideViewController *)controller
{
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
        [self dismissModalViewControllerAnimated:YES];
    } else {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
        self.flipsidePopoverController = nil;
    }
}
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:prepareForSegue</key>
							<string>- (void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController
{
    self.flipsidePopoverController = nil;
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"showAlternate"]) {
        [[segue destinationViewController] setDelegate:self];
        
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
            UIPopoverController *popoverController = [(UIStoryboardPopoverSegue *)segue popoverController];
            self.flipsidePopoverController = popoverController;
            popoverController.delegate = self;
        }
    }
}
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:togglePopover</key>
							<string>- (IBAction)togglePopover:(id)sender
{
    if (self.flipsidePopoverController) {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
        self.flipsidePopoverController = nil;
    } else {
        [self performSegueWithIdentifier:@"showAlternate" sender:sender];
    }
}
</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:togglePopover</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:togglePopover</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
				<key>iPad</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:flipsidePopoverController</key>
							<string>@property (strong, nonatomic) UIPopoverController *flipsidePopoverController;
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:flipsideView</key>
							<string>#pragma mark - Flipside View Controller

- (void)flipsideViewControllerDidFinish:(___VARIABLE_classPrefix:identifier___FlipsideViewController *)controller
{
    [self.flipsidePopoverController dismissPopoverAnimated:YES];
}
</string>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:flipsidePopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:synthesize:flipsidePopoverController = _flipsidePopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:dealloc:_flipsidePopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___FlipsideViewController.m:implementation:initSection:initViewController:contentSizeForViewInPopover</string>
						</array>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>self.mainViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MainViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MainViewController" bundle:nil]___AR___;
self.window.rootViewController = self.mainViewController;</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:showInfo</key>
							<string>- (IBAction)showInfo:(id)sender
{
    if (!self.flipsidePopoverController) {
        ___VARIABLE_classPrefix:identifier___FlipsideViewController *controller = ___RP___[[___VARIABLE_classPrefix:identifier___FlipsideViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___FlipsideViewController" bundle:nil]___AR___;
        controller.delegate = self;
        
        self.flipsidePopoverController = ___RP___[[UIPopoverController alloc] initWithContentViewController:controller]___AR___;
    }
    if ([self.flipsidePopoverController isPopoverVisible]) {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
    } else {
        [self.flipsidePopoverController presentPopoverFromBarButtonItem:sender permittedArrowDirections:UIPopoverArrowDirectionAny animated:YES];
    }
}
</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>MainViewController_iPad.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController.xib</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:ivars</key>
							<string>@interface ___VARIABLE_classPrefix:identifier___MainViewController : UIViewController &lt;___VARIABLE_classPrefix:identifier___FlipsideViewControllerDelegate, UIPopoverControllerDelegate&gt;
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:showInfo</key>
							<string>- (IBAction)togglePopover:(id)sender;
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:flipsideView</key>
							<string>#pragma mark - Flipside View Controller

- (void)flipsideViewControllerDidFinish:(___VARIABLE_classPrefix:identifier___FlipsideViewController *)controller
{
    [self.flipsidePopoverController dismissPopoverAnimated:YES];
    self.flipsidePopoverController = nil;
}
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:prepareForSegue</key>
							<string>- (void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController
{
    self.flipsidePopoverController = nil;
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"showAlternate"]) {
        [[segue destinationViewController] setDelegate:self];
        UIPopoverController *popoverController = [(UIStoryboardPopoverSegue *)segue popoverController];
        self.flipsidePopoverController = popoverController;
        popoverController.delegate = self;
    }
}
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:togglePopover</key>
							<string>- (IBAction)togglePopover:(id)sender
{
    if (self.flipsidePopoverController) {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
        self.flipsidePopoverController = nil;
    } else {
        [self performSegueWithIdentifier:@"showAlternate" sender:sender];
    }
}
</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:togglePopover</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:togglePopover</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
				<key>iPhone</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
							</dict>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>self.mainViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MainViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MainViewController" bundle:nil]___AR___;
self.window.rootViewController = self.mainViewController;</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:showInfo</key>
							<string>- (IBAction)showInfo:(id)sender
{    
    ___VARIABLE_classPrefix:identifier___FlipsideViewController *controller = ___RP___[[___VARIABLE_classPrefix:identifier___FlipsideViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___FlipsideViewController" bundle:nil]___AR___;
    controller.delegate = self;
    controller.modalTransitionStyle = UIModalTransitionStyleFlipHorizontal;
    [self presentModalViewController:controller animated:YES];
}
</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>MainViewController_iPhone.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MainViewController.xib</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:prepareForSegue</key>
							<string>- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"showAlternate"]) {
        [[segue destinationViewController] setDelegate:self];
    }
}
</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>useStoryboard</string>
			<key>Units</key>
			<dict>
				<key>false</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:mainViewController</key>
							<string>@property (strong, nonatomic) ___VARIABLE_classPrefix:identifier___MainViewController *mainViewController;
</string>
							<key>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:showInfo</key>
							<string>- (IBAction)showInfo:(id)sender;
</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___FlipsideViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>FlipsideViewController.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:class:___VARIABLE_classPrefix:identifier___MainViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:mainViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___MainViewController.h</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:mainViewController = _mainViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_mainViewController</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.h:methods:showInfo</string>
							<string>___VARIABLE_classPrefix:identifier___MainViewController.m:implementation:showInfo</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___FlipsideViewController.xib</string>
						</array>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:coreData</key>
							<string>self.mainViewController.managedObjectContext = self.managedObjectContext;</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:coreData</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
