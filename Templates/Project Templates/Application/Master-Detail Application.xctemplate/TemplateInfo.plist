<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.storyboardApplication</string>
		<string>com.apple.dt.unit.coreDataCocoaTouchApplication</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Definitions</key>
	<dict>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.h:ivars</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___DetailViewController : UIViewController &lt;UISplitViewControllerDelegate&gt;
</string>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.h:methods:detailDescriptionLabel</key>
		<string>@property (strong, nonatomic) IBOutlet UILabel *detailDescriptionLabel;
</string>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.h:methods:detailItem</key>
		<string>@property (strong, nonatomic) id detailItem;
</string>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:configureView</key>
		<dict>
			<key>Beginning</key>
			<string>- (void)configureView
{
    // Update the user interface for the detail item.
</string>
			<key>End</key>
			<string>}
</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:configureView:detailDescriptionLabel</key>
		<string>if (self.detailItem) {
    self.detailDescriptionLabel.text = [self.detailItem description];
}</string>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:setDetailItem</key>
		<string>#pragma mark - Managing the detail item

- (void)setDetailItem:(id)newDetailItem
{
    if (_detailItem != newDetailItem) {
        _detailItem = newDetailItem;
        
        // Update the view.
        [self configureView];
    }

    if (self.masterPopoverController != nil) {
        [self.masterPopoverController dismissPopoverAnimated:YES];
    }        
}
</string>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:splitViewSupport</key>
		<string>#pragma mark - Split view

- (void)splitViewController:(UISplitViewController *)splitController willHideViewController:(UIViewController *)viewController withBarButtonItem:(UIBarButtonItem *)barButtonItem forPopoverController:(UIPopoverController *)popoverController
{
    barButtonItem.title = NSLocalizedString(@"Master", @"Master");
    [self.navigationItem setLeftBarButtonItem:barButtonItem animated:YES];
    self.masterPopoverController = popoverController;
}

- (void)splitViewController:(UISplitViewController *)splitController willShowViewController:(UIViewController *)viewController invalidatingBarButtonItem:(UIBarButtonItem *)barButtonItem
{
    // Called when the view is shown again in the split view, invalidating the button and popover controller.
    [self.navigationItem setLeftBarButtonItem:nil animated:YES];
    self.masterPopoverController = nil;
}
</string>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:viewDidLoad:configureView</key>
		<string>[self configureView];</string>
		<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___DetailViewController ()
- (void)configureView;
@end
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.h:ivars</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___MasterViewController : UITableViewController
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.h:methods:detailViewController</key>
		<string>@property (strong, nonatomic) ___VARIABLE_classPrefix:identifier___DetailViewController *detailViewController;
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:canEditRowAtIndexPath</key>
		<string>- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:canMoveRowAtIndexPath</key>
		<string>/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:cellForRowAtIndexPath</key>
		<dict>
			<key>Beginning</key>
			<string>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell"];</string>
			<key>End</key>
			<string>    return cell;
}
</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:cellForRowAtIndexPath:configure</key>
		<string>
NSDate *object = [_objects objectAtIndex:indexPath.row];
cell.textLabel.text = [object description];
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:commitEditingStyle</key>
		<string>- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        [_objects removeObjectAtIndex:indexPath.row];
        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
    } else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.
    }
}
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:initSection:initViewController:setup</key>
		<string>self.clearsSelectionOnViewWillAppear = NO;
self.contentSizeForViewInPopover = CGSizeMake(320.0, 600.0);</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:insertNewObject</key>
		<string>- (void)insertNewObject:(id)sender
{
    if (!_objects) {
        _objects = [[NSMutableArray alloc] init];
    }
    [_objects insertObject:[NSDate date] atIndex:0];
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
    [self.tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationAutomatic];
}
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:moveRowAtIndexPath</key>
		<string>/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath
{
}
*/
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfRowsInSection</key>
		<dict>
			<key>Beginning</key>
			<string>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{</string>
			<key>End</key>
			<string>}
</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfRowsInSection:return</key>
		<string>return _objects.count;
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfSectionsInTableView</key>
		<dict>
			<key>Beginning</key>
			<string>#pragma mark - Table View

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{</string>
			<key>End</key>
			<string>}
</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfSectionsInTableView:return</key>
		<string>return 1;
</string>
		<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:viewDidLoad:barButtons</key>
		<string>self.navigationItem.leftBarButtonItem = self.editButtonItem;

UIBarButtonItem *addButton = ___RP___[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(insertNewObject:)]___AR___;
self.navigationItem.rightBarButtonItem = addButton;
</string>
	</dict>
	<key>Description</key>
	<string>This template provides a starting point for a master-detail application. It provides a user interface configured with a navigation controller to display a list of items and also a split view on iPad.</string>
	<key>Identifier</key>
	<string>com.apple.dt.unit.masterDetailApplication</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:comments</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:import:importCocoa</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:class</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:class:___VARIABLE_classPrefix:identifier___DetailViewController</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:ivars</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:methods</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:methods:detailViewController</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:import:___VARIABLE_classPrefix:identifier___MasterViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:import:___VARIABLE_classPrefix:identifier___DetailViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:import:private</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:synthesize</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:synthesize:detailViewController = _detailViewController</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:initSection:initViewController:title</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:dealloc:_detailViewController</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:viewDidLoad:barButtons</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:viewDidUnload</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:insertNewObject</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfSectionsInTableView:return</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfRowsInSection:return</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:cellForRowAtIndexPath:configure</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:canEditRowAtIndexPath</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:commitEditingStyle</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:moveRowAtIndexPath</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:canMoveRowAtIndexPath</string>
		<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.h:comments</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.h:import:importCocoa</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.h:class</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.h:ivars</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.h:methods:detailItem</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.h:methods:detailDescriptionLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:import:___VARIABLE_classPrefix:identifier___DetailViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:private</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:synthesize:detailItem = _detailItem</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:synthesize:detailDescriptionLabel = _detailDescriptionLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:dealloc:_detailItem</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:dealloc:_detailDescriptionLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:setDetailItem</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:configureView:detailDescriptionLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:viewDidLoad:configureView</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:viewDidUnload:detailDescriptionLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
		<string>___PACKAGENAME___-Info.plist:UISupportedInterfaceOrientations~iPhone</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>useStoryboard</string>
			<key>Units</key>
			<dict>
				<key>false</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:navigationController</key>
							<string>@property (strong, nonatomic) UINavigationController *navigationController;
</string>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:splitViewController</key>
							<string>@property (strong, nonatomic) UISplitViewController *splitViewController;
</string>
							<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:initSection:initViewController:title</key>
							<string>self.title = NSLocalizedString(@"Detail", @"Detail");</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:cellForRowAtIndexPath</key>
							<dict>
								<key>Beginning</key>
								<string>// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = ___RP___[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]___AR___;
    }
</string>
								<key>End</key>
								<string>    return cell;
}
</string>
								<key>Indent</key>
								<integer>1</integer>
							</dict>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (!self.detailViewController) {
        self.detailViewController = ___RP___[[___VARIABLE_classPrefix:identifier___DetailViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___DetailViewController" bundle:nil]___AR___;
    }
    NSDate *object = [_objects objectAtIndex:indexPath.row];
    self.detailViewController.detailItem = object;
    [self.navigationController pushViewController:self.detailViewController animated:YES];
}
</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:initSection:initViewController:title</key>
							<string>self.title = NSLocalizedString(@"Master", @"Master");</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___MasterViewController.h</string>
							<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:initSection:initViewController:title</string>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>universalDeviceFamily</string>
			<key>Units</key>
			<dict>
				<key>Universal</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:private</key>
							<string>@interface ___VARIABLE_classPrefix:identifier___DetailViewController ()
@property (strong, nonatomic) UIPopoverController *masterPopoverController;
- (void)configureView;
@end
</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:initSection:initViewController:setup</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
    self.clearsSelectionOnViewWillAppear = NO;
    self.contentSizeForViewInPopover = CGSizeMake(320.0, 600.0);
}</string>
							<key>en.lproj/MainStoryboard_iPad.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
							</dict>
							<key>en.lproj/MainStoryboard_iPhone.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:initSection:initViewController:setup</string>
							<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:synthesize:masterPopoverController = _masterPopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:dealloc:_masterPopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:splitViewSupport</string>
						</array>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
    ___VARIABLE_classPrefix:identifier___MasterViewController *masterViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MasterViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MasterViewController_iPhone" bundle:nil]___AR___;
    self.navigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:masterViewController]___AR___;
    self.window.rootViewController = self.navigationController;
} else {
    ___VARIABLE_classPrefix:identifier___MasterViewController *masterViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MasterViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MasterViewController_iPad" bundle:nil]___AR___;
    UINavigationController *masterNavigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:masterViewController]___AR___;
    
    ___VARIABLE_classPrefix:identifier___DetailViewController *detailViewController = ___RP___[[___VARIABLE_classPrefix:identifier___DetailViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___DetailViewController_iPad" bundle:nil]___AR___;
    UINavigationController *detailNavigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:detailViewController]___AR___;
	
	masterViewController.detailViewController = detailViewController;
	
    self.splitViewController = ___RP___[[UISplitViewController alloc] init]___AR___;
    self.splitViewController.delegate = detailViewController;
    self.splitViewController.viewControllers = [NSArray arrayWithObjects:masterNavigationController, detailNavigationController, nil];
    
    self.window.rootViewController = self.splitViewController;
}</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:cellForRowAtIndexPath</key>
							<dict>
								<key>Beginning</key>
								<string>// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = ___RP___[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]___AR___;
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
        }
    }
</string>
								<key>End</key>
								<string>    return cell;
}
</string>
								<key>Indent</key>
								<integer>1</integer>
							</dict>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSDate *object = [_objects objectAtIndex:indexPath.row];
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
	    if (!self.detailViewController) {
	        self.detailViewController = ___RP___[[___VARIABLE_classPrefix:identifier___DetailViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___DetailViewController_iPhone" bundle:nil]___AR___;
	    }
	    self.detailViewController.detailItem = object;
        [self.navigationController pushViewController:self.detailViewController animated:YES];
    } else {
        self.detailViewController.detailItem = object;
    }
}
</string>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController_iPad.xib</key>
							<dict>
								<key>Path</key>
								<string>DetailViewController_iPad.xib</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController_iPhone.xib</key>
							<dict>
								<key>Path</key>
								<string>DetailViewController_iPhone.xib</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController_iPad.xib</key>
							<dict>
								<key>Path</key>
								<string>MasterViewController_iPad.xib</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController_iPhone.xib</key>
							<dict>
								<key>Path</key>
								<string>MasterViewController_iPhone.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:navigationController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:splitViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___DetailViewController.h</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:navigationController = _navigationController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:splitViewController = _splitViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_navigationController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_splitViewController</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController_iPhone.xib</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController_iPad.xib</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController_iPhone.xib</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController_iPad.xib</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
    UISplitViewController *splitViewController = (UISplitViewController *)self.window.rootViewController;
    UINavigationController *navigationController = [splitViewController.viewControllers lastObject];
    splitViewController.delegate = (id)navigationController.topViewController;
}
</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:viewDidLoad:detailViewController</key>
							<string>self.detailViewController = (___VARIABLE_classPrefix:identifier___DetailViewController *)[[self.splitViewController.viewControllers lastObject] topViewController];</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:viewDidLoad:detailViewController</string>
							<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:prepareForSegue</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
    ___VARIABLE_classPrefix:identifier___MasterViewController *masterViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MasterViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MasterViewController_iPhone" bundle:nil]___AR___;
    self.navigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:masterViewController]___AR___;
    self.window.rootViewController = self.navigationController;
    masterViewController.managedObjectContext = self.managedObjectContext;
} else {
    ___VARIABLE_classPrefix:identifier___MasterViewController *masterViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MasterViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MasterViewController_iPad" bundle:nil]___AR___;
    UINavigationController *masterNavigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:masterViewController]___AR___;
    
    ___VARIABLE_classPrefix:identifier___DetailViewController *detailViewController = ___RP___[[___VARIABLE_classPrefix:identifier___DetailViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___DetailViewController_iPad" bundle:nil]___AR___;
    UINavigationController *detailNavigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:detailViewController]___AR___;
	
	masterViewController.detailViewController = detailViewController;
    
    self.splitViewController = ___RP___[[UISplitViewController alloc] init]___AR___;
    self.splitViewController.delegate = detailViewController;
    self.splitViewController.viewControllers = [NSArray arrayWithObjects:masterNavigationController, detailNavigationController, nil];
    
    self.window.rootViewController = self.splitViewController;
    masterViewController.managedObjectContext = self.managedObjectContext;
}</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSManagedObject *object = [[self fetchedResultsController] objectAtIndexPath:indexPath];
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
	    if (!self.detailViewController) {
	        self.detailViewController = ___RP___[[___VARIABLE_classPrefix:identifier___DetailViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___DetailViewController_iPhone" bundle:nil]___AR___;
	    }
        self.detailViewController.detailItem = object;
        [self.navigationController pushViewController:self.detailViewController animated:YES];
    } else {
        self.detailViewController.detailItem = object;
    }
}
</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
    UISplitViewController *splitViewController = (UISplitViewController *)self.window.rootViewController;
    UINavigationController *navigationController = [splitViewController.viewControllers lastObject];
    splitViewController.delegate = (id)navigationController.topViewController;
    
    UINavigationController *masterNavigationController = [splitViewController.viewControllers objectAtIndex:0];
    ___VARIABLE_classPrefix:identifier___MasterViewController *controller = (___VARIABLE_classPrefix:identifier___MasterViewController *)masterNavigationController.topViewController;
    controller.managedObjectContext = self.managedObjectContext;
} else {
    UINavigationController *navigationController = (UINavigationController *)self.window.rootViewController;
    ___VARIABLE_classPrefix:identifier___MasterViewController *controller = (___VARIABLE_classPrefix:identifier___MasterViewController *)navigationController.topViewController;
    controller.managedObjectContext = self.managedObjectContext;
}
</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        NSManagedObject *object = [[self fetchedResultsController] objectAtIndexPath:indexPath];
        self.detailViewController.detailItem = object;
    }
}
</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___MasterViewController.h</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        NSDate *object = [_objects objectAtIndex:indexPath.row];
        self.detailViewController.detailItem = object;
    }
}
</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>false</string>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
				<key>iPad</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:private</key>
							<string>@interface ___VARIABLE_classPrefix:identifier___DetailViewController ()
@property (strong, nonatomic) UIPopoverController *masterPopoverController;
- (void)configureView;
@end
</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSDate *object = [_objects objectAtIndex:indexPath.row];
    self.detailViewController.detailItem = object;
}
</string>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:initSection:initViewController:setup</string>
							<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:synthesize:masterPopoverController = _masterPopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:dealloc:_masterPopoverController</string>
							<string>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:splitViewSupport</string>
						</array>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<dict>
								<key>Beginning</key>
								<string>
___VARIABLE_classPrefix:identifier___MasterViewController *masterViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MasterViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MasterViewController" bundle:nil]___AR___;
UINavigationController *masterNavigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:masterViewController]___AR___;

___VARIABLE_classPrefix:identifier___DetailViewController *detailViewController = ___RP___[[___VARIABLE_classPrefix:identifier___DetailViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___DetailViewController" bundle:nil]___AR___;
UINavigationController *detailNavigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:detailViewController]___AR___;

masterViewController.detailViewController = detailViewController;

self.splitViewController = ___RP___[[UISplitViewController alloc] init]___AR___;
self.splitViewController.delegate = detailViewController;
self.splitViewController.viewControllers = [NSArray arrayWithObjects:masterNavigationController, detailNavigationController, nil];
</string>
								<key>End</key>
								<string>self.window.rootViewController = self.splitViewController;</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>DetailViewController_iPad.xib</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>MasterViewController_iPad.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:splitViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___DetailViewController.h</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:splitViewController = _splitViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_splitViewController</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController.xib</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController.xib</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>UISplitViewController *splitViewController = (UISplitViewController *)self.window.rootViewController;
UINavigationController *navigationController = [splitViewController.viewControllers lastObject];
splitViewController.delegate = (id)navigationController.topViewController;
</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:viewDidLoad:detailViewController</key>
							<string>self.detailViewController = (___VARIABLE_classPrefix:identifier___DetailViewController *)[[self.splitViewController.viewControllers lastObject] topViewController];</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:viewDidLoad:detailViewController</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSManagedObject *object = [[self fetchedResultsController] objectAtIndexPath:indexPath];
    self.detailViewController.detailItem = object;
}
</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup:coreData</key>
							<string>masterViewController.managedObjectContext = self.managedObjectContext;</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup:coreData</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>UISplitViewController *splitViewController = (UISplitViewController *)self.window.rootViewController;
UINavigationController *navigationController = [splitViewController.viewControllers lastObject];
splitViewController.delegate = (id)navigationController.topViewController;

UINavigationController *masterNavigationController = [splitViewController.viewControllers objectAtIndex:0];
___VARIABLE_classPrefix:identifier___MasterViewController *controller = (___VARIABLE_classPrefix:identifier___MasterViewController *)masterNavigationController.topViewController;
controller.managedObjectContext = self.managedObjectContext;</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___MasterViewController.h</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
				<key>iPhone</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___DetailViewController.h:ivars</key>
							<string>@interface ___VARIABLE_classPrefix:identifier___DetailViewController : UIViewController
</string>
							<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:setDetailItem</key>
							<string>#pragma mark - Managing the detail item

- (void)setDetailItem:(id)newDetailItem
{
    if (_detailItem != newDetailItem) {
        _detailItem = newDetailItem;
        
        // Update the view.
        [self configureView];
    }
}
</string>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
							</dict>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<dict>
								<key>Beginning</key>
								<string>
___VARIABLE_classPrefix:identifier___MasterViewController *masterViewController = ___RP___[[___VARIABLE_classPrefix:identifier___MasterViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___MasterViewController" bundle:nil]___AR___;
self.navigationController = ___RP___[[UINavigationController alloc] initWithRootViewController:masterViewController]___AR___;</string>
								<key>End</key>
								<string>self.window.rootViewController = self.navigationController;</string>
							</dict>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:cellForRowAtIndexPath</key>
							<dict>
								<key>Beginning</key>
								<string>// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = ___RP___[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]___AR___;
        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    }
</string>
								<key>End</key>
								<string>    return cell;
}
</string>
								<key>Indent</key>
								<integer>1</integer>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>DetailViewController_iPhone.xib</string>
							</dict>
							<key>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController.xib</key>
							<dict>
								<key>Path</key>
								<string>MasterViewController_iPhone.xib</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:navigationController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:navigationController = _navigationController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_navigationController</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___MasterViewController.xib</string>
							<string>en.lproj/___VARIABLE_classPrefix:identifier___DetailViewController.xib</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.h:class:___VARIABLE_classPrefix:identifier___DetailViewController</key>
							<string></string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.h:methods:detailViewController</key>
							<string></string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:dealloc:_detailViewController</key>
							<string></string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:synthesize:detailViewController = _detailViewController</key>
							<string></string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:prepareForSegue</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup:coreData</key>
							<string>masterViewController.managedObjectContext = self.managedObjectContext;</string>
							<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:didSelectRowAtIndexPath</key>
							<string>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (!self.detailViewController) {
        self.detailViewController = ___RP___[[___VARIABLE_classPrefix:identifier___DetailViewController alloc] initWithNibName:@"___VARIABLE_classPrefix:identifier___DetailViewController" bundle:nil]___AR___;
    }
    NSManagedObject *object = [[self fetchedResultsController] objectAtIndexPath:indexPath];
    self.detailViewController.detailItem = object;
    [self.navigationController pushViewController:self.detailViewController animated:YES];
}
</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup:coreData</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>useStoryboard</key>
							<string>false</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>UINavigationController *navigationController = (UINavigationController *)self.window.rootViewController;
___VARIABLE_classPrefix:identifier___MasterViewController *controller = (___VARIABLE_classPrefix:identifier___MasterViewController *)navigationController.topViewController;
controller.managedObjectContext = self.managedObjectContext;</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___MasterViewController.h</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>useStoryboard</key>
							<string>true</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>coreData</string>
			<key>Units</key>
			<dict>
				<key>false</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:prepareForSegue</key>
						<string>- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"showDetail"]) {
        NSIndexPath *indexPath = [self.tableView indexPathForSelectedRow];
        NSDate *object = [_objects objectAtIndex:indexPath.row];
        [[segue destinationViewController] setDetailItem:object];
    }
}
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:import:private</key>
						<string>@interface ___VARIABLE_classPrefix:identifier___MasterViewController () {
    NSMutableArray *_objects;
}
@end
</string>
					</dict>
					<key>Nodes</key>
					<array>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:dealloc:_objects</string>
					</array>
				</dict>
				<key>true</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</key>
						<dict>
							<key>Path</key>
							<string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
						</dict>
						<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:configureView:detailDescriptionLabel</key>
						<string>if (self.detailItem) {
    self.detailDescriptionLabel.text = [[self.detailItem valueForKey:@"timeStamp"] description];
}</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.h:ivars</key>
						<dict>
							<key>Beginning</key>
							<string>#import &lt;CoreData/CoreData.h&gt;

@interface ___VARIABLE_classPrefix:identifier___MasterViewController : UITableViewController &lt;NSFetchedResultsControllerDelegate&gt;
</string>
							<key>Indent</key>
							<integer>1</integer>
						</dict>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.h:methods:coreData</key>
						<string>@property (strong, nonatomic) NSFetchedResultsController *fetchedResultsController;
@property (strong, nonatomic) NSManagedObjectContext *managedObjectContext;
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:canMoveRowAtIndexPath</key>
						<string>- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    // The table view should not be re-orderable.
    return NO;
}
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:cellForRowAtIndexPath:configure</key>
						<string>[self configureCell:cell atIndexPath:indexPath];
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:commitEditingStyle</key>
						<string>- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext];
        [context deleteObject:[self.fetchedResultsController objectAtIndexPath:indexPath]];
        
        NSError *error = nil;
        if (![context save:&amp;error]) {
             // Replace this implementation with code to handle the error appropriately.
             // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
    }   
}
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:configureCell</key>
						<string>- (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath
{
    NSManagedObject *object = [self.fetchedResultsController objectAtIndexPath:indexPath];
    cell.textLabel.text = [[object valueForKey:@"timeStamp"] description];
}
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:coreData</key>
						<string>#pragma mark - Fetched results controller

- (NSFetchedResultsController *)fetchedResultsController
{
    if (__fetchedResultsController != nil) {
        return __fetchedResultsController;
    }
    
    NSFetchRequest *fetchRequest = ___RP___[[NSFetchRequest alloc] init]___AR___;
    // Edit the entity name as appropriate.
    NSEntityDescription *entity = [NSEntityDescription entityForName:@"Event" inManagedObjectContext:self.managedObjectContext];
    [fetchRequest setEntity:entity];
    
    // Set the batch size to a suitable number.
    [fetchRequest setFetchBatchSize:20];
    
    // Edit the sort key as appropriate.
    NSSortDescriptor *sortDescriptor = ___RP___[[NSSortDescriptor alloc] initWithKey:@"timeStamp" ascending:NO]___AR___;
    NSArray *sortDescriptors = [NSArray arrayWithObjects:sortDescriptor, nil];
    
    [fetchRequest setSortDescriptors:sortDescriptors];
    
    // Edit the section name key path and cache name if appropriate.
    // nil for section name key path means "no sections".
    NSFetchedResultsController *aFetchedResultsController = ___RP___[[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:nil cacheName:@"Master"]___AR___;
    aFetchedResultsController.delegate = self;
    self.fetchedResultsController = aFetchedResultsController;
    
	NSError *error = nil;
	if (![self.fetchedResultsController performFetch:&amp;error]) {
	     // Replace this implementation with code to handle the error appropriately.
	     // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
	    NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
	    abort();
	}
    
    return __fetchedResultsController;
}    

- (void)controllerWillChangeContent:(NSFetchedResultsController *)controller
{
    [self.tableView beginUpdates];
}

- (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id &lt;NSFetchedResultsSectionInfo&gt;)sectionInfo
           atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type
{
    switch(type) {
        case NSFetchedResultsChangeInsert:
            [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeDelete:
            [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
    }
}

- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject
       atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type
      newIndexPath:(NSIndexPath *)newIndexPath
{
    UITableView *tableView = self.tableView;
    
    switch(type) {
        case NSFetchedResultsChangeInsert:
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeDelete:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeUpdate:
            [self configureCell:[tableView cellForRowAtIndexPath:indexPath] atIndexPath:indexPath];
            break;
            
        case NSFetchedResultsChangeMove:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]withRowAnimation:UITableViewRowAnimationFade];
            break;
    }
}

- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    [self.tableView endUpdates];
}

/*
// Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed. 
 
 - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    // In the simplest, most efficient, case, reload the table view.
    [self.tableView reloadData];
}
 */
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:insertNewObject</key>
						<string>- (void)insertNewObject:(id)sender
{
    NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext];
    NSEntityDescription *entity = [[self.fetchedResultsController fetchRequest] entity];
    NSManagedObject *newManagedObject = [NSEntityDescription insertNewObjectForEntityForName:[entity name] inManagedObjectContext:context];
    
    // If appropriate, configure the new managed object.
    // Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.
    [newManagedObject setValue:[NSDate date] forKey:@"timeStamp"];
    
    // Save the context.
    NSError *error = nil;
    if (![context save:&amp;error]) {
         // Replace this implementation with code to handle the error appropriately.
         // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }
}
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:moveRowAtIndexPath</key>
						<string></string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfRowsInSection:return</key>
						<string>id &lt;NSFetchedResultsSectionInfo&gt; sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:section];
return [sectionInfo numberOfObjects];
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:numberOfSectionsInTableView:return</key>
						<string>return [[self.fetchedResultsController sections] count];
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:prepareForSegue</key>
						<string>- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"showDetail"]) {
        NSIndexPath *indexPath = [self.tableView indexPathForSelectedRow];
        NSManagedObject *object = [[self fetchedResultsController] objectAtIndexPath:indexPath];
        [[segue destinationViewController] setDetailItem:object];
    }
}
</string>
						<key>___VARIABLE_classPrefix:identifier___MasterViewController.m:import:private</key>
						<string>@interface ___VARIABLE_classPrefix:identifier___MasterViewController ()
- (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath;
@end
</string>
					</dict>
					<key>Nodes</key>
					<array>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.h:methods:coreData</string>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:coreData</string>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:synthesize:fetchedResultsController = __fetchedResultsController</string>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:synthesize:managedObjectContext = __managedObjectContext</string>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:dealloc:__fetchedResultsController</string>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:dealloc:__managedObjectContext</string>
						<string>___VARIABLE_classPrefix:identifier___MasterViewController.m:implementation:configureCell</string>
					</array>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>useARC</string>
			<key>Units</key>
			<dict>
				<key>false</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:setDetailItem</key>
							<string>#pragma mark - Managing the detail item

- (void)setDetailItem:(id)newDetailItem
{
    if (_detailItem != newDetailItem) {
        [_detailItem release];
        _detailItem = [newDetailItem retain];

        // Update the view.
        [self configureView];
    }

    if (self.masterPopoverController != nil) {
        [self.masterPopoverController dismissPopoverAnimated:YES];
    }        
}
</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___DetailViewController.m:implementation:setDetailItem</key>
							<string>#pragma mark - Managing the detail item

- (void)setDetailItem:(id)newDetailItem
{
    if (_detailItem != newDetailItem) {
        [_detailItem release];
        _detailItem = [newDetailItem retain];

        // Update the view.
        [self configureView];
    }
}
</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>universalDeviceFamily</key>
							<string>iPhone</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
