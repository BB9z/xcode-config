<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.cocoaTouchApplication</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Definitions</key>
	<dict>
		<key>*:implementation:initSection:initViewController</key>
		<dict>
			<key>Beginning</key>
			<string>- (void)awakeFromNib
		{</string>
			<key>End</key>
			<string>    [super awakeFromNib];
		}
		</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions</key>
		<dict>
			<key>Beginning</key>
			<string>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Override point for customization after application launch.</string>
			<key>End</key>
			<string>    return YES;
}
</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___DataViewController.h:ivars</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___DataViewController : UIViewController
</string>
		<key>___VARIABLE_classPrefix:identifier___DataViewController.h:methods:dataLabel</key>
		<string>@property (strong, nonatomic) IBOutlet UILabel *dataLabel;</string>
		<key>___VARIABLE_classPrefix:identifier___DataViewController.h:methods:dataObject</key>
		<string>@property (strong, nonatomic) id dataObject;
</string>
		<key>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:viewWillAppear</key>
		<string>- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    self.dataLabel.text = [self.dataObject description];
}
</string>
		<key>___VARIABLE_classPrefix:identifier___DataViewController.m:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___DataViewController ()

@end
</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.h:ivars</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___ModelController : NSObject &lt;UIPageViewControllerDataSource&gt;
</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.h:methods:indexOfViewController</key>
		<string>- (NSUInteger)indexOfViewController:(___VARIABLE_classPrefix:identifier___DataViewController *)viewController;
</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.h:methods:viewControllerAtIndex</key>
		<string>- (___VARIABLE_classPrefix:identifier___DataViewController *)viewControllerAtIndex:(NSUInteger)index storyboard:(UIStoryboard *)storyboard;</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:indexOfViewController</key>
		<string>- (NSUInteger)indexOfViewController:(___VARIABLE_classPrefix:identifier___DataViewController *)viewController
{   
     // Return the index of the given data view controller.
     // For simplicity, this implementation uses a static array of model objects and the view controller stores the model object; you can therefore use the model object to identify the index.
    return [self.pageData indexOfObject:viewController.dataObject];
}
</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:init:setup</key>
		<string>// Create the data model.
NSDateFormatter *dateFormatter = ___RP___[[NSDateFormatter alloc] init]___AR___;
_pageData = [[dateFormatter monthSymbols] copy];</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:pageViewControllerDataSource</key>
		<string>#pragma mark - Page View Controller Data Source

- (UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerBeforeViewController:(UIViewController *)viewController
{
    NSUInteger index = [self indexOfViewController:(___VARIABLE_classPrefix:identifier___DataViewController *)viewController];
    if ((index == 0) || (index == NSNotFound)) {
        return nil;
    }
    
    index--;
    return [self viewControllerAtIndex:index storyboard:viewController.storyboard];
}

- (UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerAfterViewController:(UIViewController *)viewController
{
    NSUInteger index = [self indexOfViewController:(___VARIABLE_classPrefix:identifier___DataViewController *)viewController];
    if (index == NSNotFound) {
        return nil;
    }
    
    index++;
    if (index == [self.pageData count]) {
        return nil;
    }
    return [self viewControllerAtIndex:index storyboard:viewController.storyboard];
}
</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:viewControllerAtIndex</key>
		<string>- (___VARIABLE_classPrefix:identifier___DataViewController *)viewControllerAtIndex:(NSUInteger)index storyboard:(UIStoryboard *)storyboard
{   
    // Return the data view controller for the given index.
    if (([self.pageData count] == 0) || (index &gt;= [self.pageData count])) {
        return nil;
    }
    
    // Create a new view controller and pass suitable data.
    ___VARIABLE_classPrefix:identifier___DataViewController *dataViewController = [storyboard instantiateViewControllerWithIdentifier:@"___VARIABLE_classPrefix:identifier___DataViewController"];
    dataViewController.dataObject = [self.pageData objectAtIndex:index];
    return dataViewController;
}
</string>
		<key>___VARIABLE_classPrefix:identifier___ModelController.m:private</key>
		<string>/*
 A controller object that manages a simple model -- a collection of month names.
 
 The controller serves as the data source for the page view controller; it therefore implements pageViewController:viewControllerBeforeViewController: and pageViewController:viewControllerAfterViewController:.
 It also implements a custom method, viewControllerAtIndex: which is useful in the implementation of the data source methods, and in the initial configuration of the application.
 
 There is no need to actually create view controllers for each page in advance -- indeed doing so incurs unnecessary overhead. Given the data model, these methods create, configure, and return a new view controller on demand.
 */

@interface ___VARIABLE_classPrefix:identifier___ModelController()
@property (readonly, strong, nonatomic) NSArray *pageData;
@end
</string>
		<key>___VARIABLE_classPrefix:identifier___RootViewController.h:ivars</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___RootViewController : UIViewController &lt;UIPageViewControllerDelegate&gt;
</string>
		<key>___VARIABLE_classPrefix:identifier___RootViewController.h:methods:pageViewController</key>
		<string>@property (strong, nonatomic) UIPageViewController *pageViewController;
</string>
		<key>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:UIPageViewController</key>
		<dict>
			<key>Beginning</key>
			<string>- (___VARIABLE_classPrefix:identifier___ModelController *)modelController
{
     // Return the model controller object, creating it if necessary.
     // In more complex implementations, the model controller may be passed to the view controller.
    if (!_modelController) {
        _modelController = [[___VARIABLE_classPrefix:identifier___ModelController alloc] init];
    }
    return _modelController;
}

#pragma mark - UIPageViewController delegate methods

/*
- (void)pageViewController:(UIPageViewController *)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray *)previousViewControllers transitionCompleted:(BOOL)completed
{
    
}
 */

- (UIPageViewControllerSpineLocation)pageViewController:(UIPageViewController *)pageViewController spineLocationForInterfaceOrientation:(UIInterfaceOrientation)orientation
{</string>
			<key>End</key>
			<string>}
</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:viewDidLoad:setup</key>
		<dict>
			<key>Beginning</key>
			<string>// Configure the page view controller and add it as a child view controller.
self.pageViewController = ___RP___[[UIPageViewController alloc] initWithTransitionStyle:UIPageViewControllerTransitionStylePageCurl navigationOrientation:UIPageViewControllerNavigationOrientationHorizontal options:nil]___AR___;
self.pageViewController.delegate = self;

___VARIABLE_classPrefix:identifier___DataViewController *startingViewController = [self.modelController viewControllerAtIndex:0 storyboard:self.storyboard];
NSArray *viewControllers = [NSArray arrayWithObject:startingViewController];
[self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:NO completion:NULL];

self.pageViewController.dataSource = self.modelController;

[self addChildViewController:self.pageViewController];
[self.view addSubview:self.pageViewController.view];

// Set the page view controller's bounds using an inset rect so that self's view is visible around the edges of the pages.
CGRect pageViewRect = self.view.bounds;</string>
			<key>End</key>
			<string>self.pageViewController.view.frame = pageViewRect;

[self.pageViewController didMoveToParentViewController:self];

// Add the page view controller's gesture recognizers to the book view controller's view so that the gestures are started more easily.
self.view.gestureRecognizers = self.pageViewController.gestureRecognizers;</string>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___RootViewController.m:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___RootViewController ()
@property (readonly, strong, nonatomic) ___VARIABLE_classPrefix:identifier___ModelController *modelController;
@end
</string>
	</dict>
	<key>Description</key>
	<string>This template provides a starting point for a page-based application that uses a page view controller. </string>
	<key>Identifier</key>
	<string>com.apple.dt.unit.pageBasedApplication</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
		<string>___PACKAGENAME___-Prefix.pch:Availability:iPhoneAvailability:5</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.h:comments</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.h:import:importCocoa</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.h:class</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.h:ivars</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.h:methods:pageViewController</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:import:___VARIABLE_classPrefix:identifier___RootViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:import:___VARIABLE_classPrefix:identifier___ModelController.h</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:import:___VARIABLE_classPrefix:identifier___DataViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:private</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:synthesize:pageViewController = _pageViewController</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:synthesize:modelController = _modelController</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:dealloc:_pageViewController</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:dealloc:_modelController</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:viewDidLoad:setup:inset</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:viewDidUnload</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
		<string>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:UIPageViewController:content</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.h:comments</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.h:import:importCocoa</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.h:class</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.h:ivars</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.h:methods:dataLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.h:methods:dataObject</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:import:___VARIABLE_classPrefix:identifier___DataViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:private</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:synthesize:dataLabel = _dataLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:synthesize:dataObject = _dataObject</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:dealloc:_dataLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:dealloc:_dataObject</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:viewDidLoad</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:viewDidUnload:dataLabel</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:viewWillAppear</string>
		<string>___VARIABLE_classPrefix:identifier___DataViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.h:comments</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.h:import:importCocoa</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.h:class:___VARIABLE_classPrefix:identifier___DataViewController</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.h:ivars</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.h:methods:viewControllerAtIndex</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.h:methods:indexOfViewController</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:import:___VARIABLE_classPrefix:identifier___ModelController.h</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:import:___VARIABLE_classPrefix:identifier___DataViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:private</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:synthesize:pageData = _pageData</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:dealloc:_pageData</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:init:setup</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:viewControllerAtIndex</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:indexOfViewController</string>
		<string>___VARIABLE_classPrefix:identifier___ModelController.m:implementation:pageViewControllerDataSource</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>universalDeviceFamily</string>
			<key>Units</key>
			<dict>
				<key>Universal</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___PACKAGENAME___-Info.plist:UIMainStoryboardFile</key>
							<string>&lt;key&gt;UIMainStoryboardFile&lt;/key&gt;
&lt;string&gt;MainStoryboard_iPhone&lt;/string&gt;
&lt;key&gt;UIMainStoryboardFile~ipad&lt;/key&gt;
&lt;string&gt;MainStoryboard_iPad&lt;/string&gt;</string>
							<key>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:UIPageViewController:content</key>
							<string>if (UIInterfaceOrientationIsPortrait(orientation) || ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone)) {
    // In portrait orientation or on iPhone: Set the spine position to "min" and the page view controller's view controllers array to contain just one view controller. Setting the spine position to 'UIPageViewControllerSpineLocationMid' in landscape orientation sets the doubleSided property to YES, so set it to NO here.
    
    UIViewController *currentViewController = [self.pageViewController.viewControllers objectAtIndex:0];
    NSArray *viewControllers = [NSArray arrayWithObject:currentViewController];
    [self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:YES completion:NULL];
    
    self.pageViewController.doubleSided = NO;
    return UIPageViewControllerSpineLocationMin;
}

// In landscape orientation: Set set the spine location to "mid" and the page view controller's view controllers array to contain two view controllers. If the current page is even, set it to contain the current and next view controllers; if it is odd, set the array to contain the previous and current view controllers.
___VARIABLE_classPrefix:identifier___DataViewController *currentViewController = [self.pageViewController.viewControllers objectAtIndex:0];
NSArray *viewControllers = nil;

NSUInteger indexOfCurrentViewController = [self.modelController indexOfViewController:currentViewController];
if (indexOfCurrentViewController == 0 || indexOfCurrentViewController % 2 == 0) {
    UIViewController *nextViewController = [self.modelController pageViewController:self.pageViewController viewControllerAfterViewController:currentViewController];
    viewControllers = [NSArray arrayWithObjects:currentViewController, nextViewController, nil];
} else {
    UIViewController *previousViewController = [self.modelController pageViewController:self.pageViewController viewControllerBeforeViewController:currentViewController];
    viewControllers = [NSArray arrayWithObjects:previousViewController, currentViewController, nil];
}
[self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:YES completion:NULL];


return UIPageViewControllerSpineLocationMid;
</string>
							<key>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:viewDidLoad:setup:inset</key>
							<string>if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
    pageViewRect = CGRectInset(pageViewRect, 40.0, 40.0);
}</string>
							<key>en.lproj/MainStoryboard_iPad.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
							</dict>
							<key>en.lproj/MainStoryboard_iPhone.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___PACKAGENAME___-Info.plist:UIMainStoryboardFile</string>
							<string>en.lproj/MainStoryboard_iPhone.storyboard</string>
							<string>en.lproj/MainStoryboard_iPad.storyboard</string>
						</array>
					</dict>
				</array>
				<key>iPad</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___PACKAGENAME___-Info.plist:UIMainStoryboardFile</key>
							<string>&lt;key&gt;UIMainStoryboardFile&lt;/key&gt;
&lt;string&gt;MainStoryboard&lt;/string&gt;</string>
							<key>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:UIPageViewController:content</key>
							<string>if (UIInterfaceOrientationIsPortrait(orientation)) {
    // In portrait orientation: Set the spine position to "min" and the page view controller's view controllers array to contain just one view controller. Setting the spine position to 'UIPageViewControllerSpineLocationMid' in landscape orientation sets the doubleSided property to YES, so set it to NO here.
    UIViewController *currentViewController = [self.pageViewController.viewControllers objectAtIndex:0];
    NSArray *viewControllers = [NSArray arrayWithObject:currentViewController];
    [self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:YES completion:NULL];
    
    self.pageViewController.doubleSided = NO;
    return UIPageViewControllerSpineLocationMin;
}

// In landscape orientation: Set set the spine location to "mid" and the page view controller's view controllers array to contain two view controllers. If the current page is even, set it to contain the current and next view controllers; if it is odd, set the array to contain the previous and current view controllers.
___VARIABLE_classPrefix:identifier___DataViewController *currentViewController = [self.pageViewController.viewControllers objectAtIndex:0];
NSArray *viewControllers = nil;

NSUInteger indexOfCurrentViewController = [self.modelController indexOfViewController:currentViewController];
if (indexOfCurrentViewController == 0 || indexOfCurrentViewController % 2 == 0) {
    UIViewController *nextViewController = [self.modelController pageViewController:self.pageViewController viewControllerAfterViewController:currentViewController];
    viewControllers = [NSArray arrayWithObjects:currentViewController, nextViewController, nil];
} else {
    UIViewController *previousViewController = [self.modelController pageViewController:self.pageViewController viewControllerBeforeViewController:currentViewController];
    viewControllers = [NSArray arrayWithObjects:previousViewController, currentViewController, nil];
}
[self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:YES completion:NULL];


return UIPageViewControllerSpineLocationMid;
</string>
							<key>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:viewDidLoad:setup:inset</key>
							<string>pageViewRect = CGRectInset(pageViewRect, 40.0, 40.0);</string>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___PACKAGENAME___-Info.plist:UIMainStoryboardFile</string>
							<string>en.lproj/MainStoryboard.storyboard</string>
						</array>
					</dict>
				</array>
				<key>iPhone</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___PACKAGENAME___-Info.plist:UIMainStoryboardFile</key>
							<string>&lt;key&gt;UIMainStoryboardFile&lt;/key&gt;
&lt;string&gt;MainStoryboard&lt;/string&gt;</string>
							<key>___VARIABLE_classPrefix:identifier___RootViewController.m:implementation:UIPageViewController:content</key>
							<string>// Set the spine position to "min" and the page view controller's view controllers array to contain just one view controller. Setting the spine position to 'UIPageViewControllerSpineLocationMid' in landscape orientation sets the doubleSided property to YES, so set it to NO here.
UIViewController *currentViewController = [self.pageViewController.viewControllers objectAtIndex:0];
NSArray *viewControllers = [NSArray arrayWithObject:currentViewController];
[self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:YES completion:NULL];

self.pageViewController.doubleSided = NO;
return UIPageViewControllerSpineLocationMin;
</string>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
							</dict>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___PACKAGENAME___-Info.plist:UIMainStoryboardFile</string>
							<string>en.lproj/MainStoryboard.storyboard</string>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
